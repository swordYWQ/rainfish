{"meta":{"title":"雨中的YU","subtitle":null,"description":null,"author":"weiqiang.yu","url":"https://swordYWQ.github.com"},"pages":[{"title":"categories","date":"2018-03-06T06:57:33.000Z","updated":"2018-03-06T06:58:04.774Z","comments":false,"path":"categories/index.html","permalink":"https://swordYWQ.github.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-03-06T06:57:12.000Z","updated":"2018-03-06T06:58:07.043Z","comments":false,"path":"tags/index.html","permalink":"https://swordYWQ.github.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue性能优化之keep-alive","slug":"vue-keepalive","date":"2018-03-06T06:26:19.166Z","updated":"2017-12-18T06:58:39.591Z","comments":true,"path":"2018/03/06/vue-keepalive/","link":"","permalink":"https://swordYWQ.github.com/2018/03/06/vue-keepalive/","excerpt":"","text":"在web项目中我们经常使用各种缓存在达到提高访问速度的效果，那么，在vue项目中如何使用组件缓存呢。 keep-alivekeep-alive 是vue官方提供的缓存组件。它是一个抽象组件，在页面中使用keep-alive组件缓存,能有效提高页面响应速度，组件被卸载后不会被destroy掉，而是变成不活跃状态存在内存中，当再次访问组件时直接从内存中获取缓存渲染，而不是重新请求。 场景一般使用keep-alive的场景为router-view路由组件或者component动态组件。 使用方式1 只用单独的keep-alive包裹的话，会缓存router-view 渲染的所有组件2 使用include绑定一个数组，只会缓存数组中name相同的组件3 使用exclude绑定一个数组，会缓存除了数组中name相同的其他所有渲染的组件 123&lt;keep-alive :include=\"cachePages\" :exclude=\"excludePages\"&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/keep-alive&gt; 缺陷能够实现打开后的组件进行缓存，但关闭标签页后，重新打开组件，组件仍是缓存后的组件，无法实现从内存中移除已缓存的组件。","categories":[{"name":"前端","slug":"前端","permalink":"https://swordYWQ.github.com/categories/前端/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://swordYWQ.github.com/tags/vue/"},{"name":"javascript","slug":"javascript","permalink":"https://swordYWQ.github.com/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://swordYWQ.github.com/tags/前端/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-03-06T01:39:03.923Z","updated":"2018-03-06T01:39:03.923Z","comments":true,"path":"2018/03/06/hello-world/","link":"","permalink":"https://swordYWQ.github.com/2018/03/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}