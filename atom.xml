<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雨中的YU</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://swordYWQ.github.com/"/>
  <updated>2018-08-24T03:45:00.304Z</updated>
  <id>https://swordYWQ.github.com/</id>
  
  <author>
    <name>weiqiang.yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ios上无法自动播放audio音乐</title>
    <link href="https://swordYWQ.github.com/2018/08/24/ios-audio/"/>
    <id>https://swordYWQ.github.com/2018/08/24/ios-audio/</id>
    <published>2018-08-24T03:41:45.951Z</published>
    <updated>2018-08-24T03:45:00.304Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="ios上无法自动播放audio音乐"><a href="#ios上无法自动播放audio音乐" class="headerlink" title="ios上无法自动播放audio音乐"></a>ios上无法自动播放audio音乐</h1><p>在网页中加入音频作为背景音乐自动播放时，在ios设备中会出现无法自动播放的情况。</p><p>由于ios设备限制，用户未有页面交互时，无法自动播放音乐，因此需要手动监听touchstart事件触发播放。</p><p>如果音乐播放时手动触发的，不会出现这种情况。</p><p>在ios设备中做如下监听:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&quot;DOMContentLoaded&quot;, function() &#123;</span><br><span class="line">     function audioAutoPlay() &#123;</span><br><span class="line">       document.getElementById(&apos;audio&apos;).play()</span><br><span class="line">     &#125;</span><br><span class="line">     audioAutoPlay();</span><br><span class="line">   &#125;);</span><br><span class="line">   //--创建触摸监听，当浏览器打开页面时，触摸屏幕触发事件，进行音频播放</span><br><span class="line">   document.addEventListener(&quot;touchstart&quot;, function() &#123;</span><br><span class="line">     function audioAutoPlay() &#123;</span><br><span class="line">       document.getElementById(&apos;audio&apos;).play()</span><br><span class="line">     &#125;</span><br><span class="line">     audioAutoPlay();</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;ios上无法自动播放audio音乐&quot;&gt;&lt;a href=&quot;#ios上无法自动播放audio音乐&quot; class=&quot;headerlink&quot; title=&quot;ios上无法自动播放audio音乐&quot;&gt;&lt;/a&gt;ios上无法自动播放audio音乐&lt;/h1&gt;&lt;p&gt;在网页中加
      
    
    </summary>
    
      <category term="前端" scheme="https://swordYWQ.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://swordYWQ.github.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="移动端" scheme="https://swordYWQ.github.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>http参数格式转换</title>
    <link href="https://swordYWQ.github.com/2018/08/24/http-param-format/"/>
    <id>https://swordYWQ.github.com/2018/08/24/http-param-format/</id>
    <published>2018-08-24T03:34:31.544Z</published>
    <updated>2018-08-24T03:42:08.559Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="http请求参数格式化"><a href="#http请求参数格式化" class="headerlink" title="http请求参数格式化"></a>http请求参数格式化</h1><p>http请求时，对参数格式有一定要求</p><p>get请求参数衔接在请求url后，使用问号(?)分隔并使用与符号(&amp;)连接多个参数</p><p>post请求中，当请求方式为formdata时，也需要转换成key=value&amp;key1=value1这样的形式</p><p>通常http库会对参数进行一定程度的封装，对get请求不需要特别处理，但post请求有时需要手动处理格式，如axios</p><p>此时我们在请求发出前的通用方法中加入如下参数转换方法，即可对参数格式进行转换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> str = [];</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">         str.push(<span class="built_in">encodeURIComponent</span>(p)<span class="string">"="</span><span class="built_in">encodeURIComponent</span>(obj[p]));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> str.join(<span class="string">"&amp;"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;http请求参数格式化&quot;&gt;&lt;a href=&quot;#http请求参数格式化&quot; class=&quot;headerlink&quot; title=&quot;http请求参数格式化&quot;&gt;&lt;/a&gt;http请求参数格式化&lt;/h1&gt;&lt;p&gt;http请求时，对参数格式有一定要求&lt;/p&gt;
&lt;p&gt;get
      
    
    </summary>
    
      <category term="前端" scheme="https://swordYWQ.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://swordYWQ.github.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="http" scheme="https://swordYWQ.github.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>js判断数据类型的方法</title>
    <link href="https://swordYWQ.github.com/2018/05/11/js/js-type/"/>
    <id>https://swordYWQ.github.com/2018/05/11/js/js-type/</id>
    <published>2018-05-11T01:28:47.392Z</published>
    <updated>2018-05-11T02:08:15.890Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中，我们经常需要判断数据的类型，根据数据类型对数据做不同操作，这里总结一下js中判断数据类型的方法。</p><h1 id="常用的检测对象类型的方法"><a href="#常用的检测对象类型的方法" class="headerlink" title="常用的检测对象类型的方法"></a>常用的检测对象类型的方法</h1><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>typeof 是一个操作符，其右侧跟一个一元表达式，并返回这个表达式的数据类型。返回的结果用该类型的字符串(全小写字母)形式表示，包括以下 7 种：number、boolean、symbol、string、object、undefined、function 等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">''</span>  <span class="comment">// 'string' 字符串类型  有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">1</span>;  <span class="comment">// 'number' 数字类型  有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>(); <span class="comment">// 'symbol' symbol类型 有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// 'boolean' 布尔类型 有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">//'undefined' 未定义 有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Function</span>(); <span class="comment">// 'function' 方法 有效</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">//object 无效</span></span><br><span class="line"><span class="keyword">typeof</span> [] ; <span class="comment">//object 无效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//object 无效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(); <span class="comment">//object 无效</span></span><br></pre></td></tr></table></figure><p>typeof 可以正确判断string,number,symbol,boolean,undefind,function类型，但对于null,array,Date,RegExp均只能返回object字符串，无法对其类型做出正确判断。</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>instanceof 是用来判断A是否为B的实例，如 A instanceof B，如果A是B的实例，则返回true，否则返回false。instanceof检测的是原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// true</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>() <span class="keyword">instanceof</span> <span class="built_in">Object</span>;<span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Function</span>() <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以发现，上面代码返回都是true，<em>instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。</em></p><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><p>Array.isArray()是ES5提供的确认某个对象本身是否为Array类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([]) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>可以通过检测原型对象的constructor属性判断数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.constructor == <span class="built_in">String</span>  <span class="comment">// true </span></span><br><span class="line"><span class="literal">true</span>.constructor == <span class="built_in">Boolean</span> <span class="comment">// true</span></span><br><span class="line">[].constructor == <span class="built_in">Array</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.constructor == HTMLDocument <span class="comment">// true</span></span><br><span class="line"><span class="built_in">window</span>.constructor == Window <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>).constructor == <span class="built_in">Number</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Function</span>().constructor == <span class="built_in">Function</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().constructor == <span class="built_in">Date</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Error</span>().constructor == <span class="built_in">Error</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>部分类型数据本身带有constructor属性，而部分类型需要实例化后才能进行比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. null 和 undefined 是无效的对象，因此是不会有 constructor 存在的，这两种类型的数据需要通过其他方式来判断。</span><br><span class="line"></span><br><span class="line">2. 函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object</span><br></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。</p><p>对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>) ;   <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>) ;    <span class="comment">// [object Number]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>) ; <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>()); <span class="comment">//[object Symbol]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) ; <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) ; <span class="comment">// [object Null]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Function</span>()) ; <span class="comment">// [object Function]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) ; <span class="comment">// [object Date]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]) ; <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">RegExp</span>()) ; <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Error</span>()) ; <span class="comment">// [object Error]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>) ; <span class="comment">// [object HTMLDocument]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">window</span>) ; <span class="comment">//[object global] window 是全局对象 global 的引用</span></span><br></pre></td></tr></table></figure><h1 id="如何判断"><a href="#如何判断" class="headerlink" title="如何判断"></a>如何判断</h1><p>可以根据项目需求使用不同的方式对数据类型进行判断:</p><p>对于一般数据类型，如string,number,boolean,symbol,undefined我们可以使用<em>typeof</em>判断。</p><p>对于数组的判断一般直接使用ES5自带的Array.isArray(value)方法进行判断。</p><p>如果需要判断足够多的数据类型，使用Object.prototype.toString.call(value)是比较方便的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在项目中，我们经常需要判断数据的类型，根据数据类型对数据做不同操作，这里总结一下js中判断数据类型的方法。&lt;/p&gt;
&lt;h1 id=&quot;常用的检测对象类型的方法&quot;&gt;&lt;a href=&quot;#常用的检测对象类型的方法&quot; class=&quot;headerlink&quot; title=&quot;常用的检测对象
      
    
    </summary>
    
      <category term="前端" scheme="https://swordYWQ.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://swordYWQ.github.com/tags/javascript/"/>
    
      <category term="前端" scheme="https://swordYWQ.github.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>将图片以base64形式嵌入html中提升渲染速度</title>
    <link href="https://swordYWQ.github.com/2018/05/10/optimization-pic/"/>
    <id>https://swordYWQ.github.com/2018/05/10/optimization-pic/</id>
    <published>2018-05-10T01:49:21.953Z</published>
    <updated>2018-05-11T07:59:50.539Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="页面图片优化"><a href="#页面图片优化" class="headerlink" title="页面图片优化"></a>页面图片优化</h1><p>通常引入图片的时候，会触发多个http请求图片资源，使得页面渲染效果会变差，图片可能会出现空白或层次渲染的情况，体验效果会很差。</p><h1 id="将图片转换为base64编码"><a href="#将图片转换为base64编码" class="headerlink" title="将图片转换为base64编码"></a>将图片转换为base64编码</h1><p>把图片以base64格式后嵌入html，页面渲染速度会更快，图片是直接展现，使得展现效果会更好。</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>当然，转化为base64格式的图片虽然能提高渲染体验，但也存在一些缺点，由于图片转化成了字符串编码嵌入html中，简介提升了html文件的体积。如果图片较大或较多时，加载html会花费更长的时间，反而会降低初次加载的速度。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>对小于10kb的图片，我们使用base64字符串编码，对大于10kb的图片，我们正常加载或者针对其他方面做优化。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>在使用webpack的项目中，可以通过配置url-loader对图片资源做出处理，小于limit的图片将会转化为base64格式，limit可以根据需要酌情修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">100000</span>,</span><br><span class="line">          name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>引用时:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"a.png"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>编译后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;data:image/png;base64:iVBORw0KGgoAAAANSUhEUgAAADg&quot; alt=&quot;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>能明显看到src的内容被修改为base64格式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;页面图片优化&quot;&gt;&lt;a href=&quot;#页面图片优化&quot; class=&quot;headerlink&quot; title=&quot;页面图片优化&quot;&gt;&lt;/a&gt;页面图片优化&lt;/h1&gt;&lt;p&gt;通常引入图片的时候，会触发多个http请求图片资源，使得页面渲染效果会变差，图片可能会出现空白或层
      
    
    </summary>
    
      <category term="前端" scheme="https://swordYWQ.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://swordYWQ.github.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="https://swordYWQ.github.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>vue路由懒加载</title>
    <link href="https://swordYWQ.github.com/2018/05/09/vue/vue-router-lazy/"/>
    <id>https://swordYWQ.github.com/2018/05/09/vue/vue-router-lazy/</id>
    <published>2018-05-09T03:28:10.499Z</published>
    <updated>2018-05-11T07:59:28.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack打包后体积过大"><a href="#webpack打包后体积过大" class="headerlink" title="webpack打包后体积过大"></a>webpack打包后体积过大</h2><p>我们知道，vue-cli项目默认使用webpack进行打包，打包的时候，会把所有的css,js,vue文件打包成js，页面比较多的时候，最后会生成一个比较大的js文件。</p><p>这样的话，在网站进入的时候，需要等待这个大文件下载完成才能进入页面。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这时我们就可以考虑路由懒加载了，路由懒加载是通过异步加载路由组件，打包后会为每一个组件生成一个js文件，切换路由的时候才会加载该js，减少公用js体积，加快首页渲染速度。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在配置路由组件的时候，把默认的配置修改一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'@/login.vue'</span></span><br><span class="line">&#123;</span><br><span class="line">  path:<span class="string">'/login'</span>,</span><br><span class="line">  name:<span class="string">'login'</span>,</span><br><span class="line">  component: Login</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path:<span class="string">'/login'</span>,</span><br><span class="line">  name:<span class="string">'login'</span>,</span><br><span class="line">  component:<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>(<span class="string">'***/login.vue'</span>,resolve)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack打包后体积过大&quot;&gt;&lt;a href=&quot;#webpack打包后体积过大&quot; class=&quot;headerlink&quot; title=&quot;webpack打包后体积过大&quot;&gt;&lt;/a&gt;webpack打包后体积过大&lt;/h2&gt;&lt;p&gt;我们知道，vue-cli项目默认使用webp
      
    
    </summary>
    
      <category term="前端" scheme="https://swordYWQ.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://swordYWQ.github.com/tags/vue/"/>
    
      <category term="前端" scheme="https://swordYWQ.github.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>常用的跨域解决方案</title>
    <link href="https://swordYWQ.github.com/2018/04/19/cross-origin/"/>
    <id>https://swordYWQ.github.com/2018/04/19/cross-origin/</id>
    <published>2018-04-19T09:42:14.669Z</published>
    <updated>2018-05-10T02:10:12.075Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h1><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源。</p><h1 id="如何跨域"><a href="#如何跨域" class="headerlink" title="如何跨域"></a>如何跨域</h1><p>在项目开发中，时常遇见浏览器接口请求需要跨域访问的情况，此时，我们该如何访问呢？</p><p>下面是几种常用的跨域解决方案:</p><h2 id="通过JSONP跨域"><a href="#通过JSONP跨域" class="headerlink" title="通过JSONP跨域"></a>通过JSONP跨域</h2><p>接口通过jsonp格式请求，请求中需带上callback字段，传递回调方法名，服务端返回结果需要以回调参数的形式返回。</p><p>在页面上我们可以引入不同域上的js脚本文件，但是无法通过ajax访问接口，jsonp的原理是通过一个js脚本回调达到跨域请求的效果。</p><h2 id="服务端设置响应头"><a href="#服务端设置响应头" class="headerlink" title="服务端设置响应头"></a>服务端设置响应头</h2><p>服务端设置Access-Control-Allow-Origin响应头为 *，表示允许所有请求跨域访问，也可以设置为具体域名或IP，达到允许制定地址访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br></pre></td></tr></table></figure><p>此时需要加上前端header头 ‘Content-Type’: ‘application/x-www-form-urlencoded’</p><p>如果跨域请求需要携带cookie信息:</p><p>此时服务端需要设置响应头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, request.getHeader(&quot;Origin&quot;));</span><br></pre></td></tr></table></figure><p>而前端代码ajax请求需要加上withCredentials = true属性，允许携带cookie，</p><h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><p>如果是前后端分离的项目，前端开发阶段可以通过webpack或者gulp构建本地服务器并设置转发。</p><p>如webpack配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">     historyApiFallback: true,</span><br><span class="line">     noInfo: true,</span><br><span class="line">     proxy: &#123;</span><br><span class="line">         &apos;/menu&apos;: &#123;</span><br><span class="line">             target: &apos;https://other-server.example.com&apos;,</span><br><span class="line">             secure: false</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>也可以手写一个node express代理转发,代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const timeout = require(&apos;connect-timeout&apos;);</span><br><span class="line">const proxy = require(&apos;http-proxy-middleware&apos;);</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">// 这里从环境变量读取配置，方便命令行启动</span><br><span class="line">// HOST 指目标地址</span><br><span class="line">// PORT 服务端口</span><br><span class="line">// const &#123; HOST = &apos;http://api.zhuishushenqi.com&apos;, PORT = &apos;3300&apos; &#125; = process.env;</span><br><span class="line"></span><br><span class="line">// 超时时间</span><br><span class="line">const TIME_OUT = 30 * 1e3;</span><br><span class="line"></span><br><span class="line">// 设置端口</span><br><span class="line">app.set(&apos;port&apos;, 1337);</span><br><span class="line"></span><br><span class="line">// 设置超时 返回超时响应</span><br><span class="line">app.use(timeout(TIME_OUT));</span><br><span class="line">app.use((req, res, next) =&gt; &#123;</span><br><span class="line">  if (!req.timedout) next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 静态页面</span><br><span class="line">// 这里一般设置你的静态资源路径</span><br><span class="line">app.use(&apos;/&apos;, express.static(__dirname));</span><br><span class="line"></span><br><span class="line">// 反向代理（这里把需要进行反代的路径配置到这里即可）</span><br><span class="line">// eg:将/api/test 代理到 $&#123;HOST&#125;/api/test</span><br><span class="line">app.use(&apos;/api1&apos;, proxy(&#123;</span><br><span class="line">  target: &apos;http://api.zhuishushenqi.com&apos;, pathRewrite: &#123;</span><br><span class="line">    &apos;^/api1&apos;: &apos;/&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  changeOrigin: true</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/api2&apos;, proxy(&#123;</span><br><span class="line">  target: &apos;http://chapterup.zhuishushenqi.com&apos;, pathRewrite: &#123;</span><br><span class="line">    &apos;^/api2&apos;: &apos;/&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  changeOrigin: true</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">// 监听端口</span><br><span class="line">app.listen(app.get(&apos;port&apos;), () =&gt; &#123;</span><br><span class="line">  console.log(`server running @$&#123;app.get(&apos;port&apos;)&#125;`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>把这个js文件放在根目录，用node启动，在本地进行ajax请求时，加上特定的url标识，就能正常转发了。</p><p>如果使用nginx作为服务器，可以添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">upstream my_server &#123;                                                         </span><br><span class="line">    server 10.0.0.2:8080;                                                </span><br><span class="line">    keepalive 2000;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;                                                         </span><br><span class="line">    server_name  10.0.0.1;                                               </span><br><span class="line">    client_max_body_size 1024M;</span><br><span class="line"></span><br><span class="line">    location /my/ &#123;</span><br><span class="line">        proxy_pass http://my_server;</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我只针对了常用的几种跨域方式进行了介绍,还有不同类型的其他跨域方式，如同源跨域，设置domain，或者postMessage，或者window.name，这里就不一一介绍了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;什么是跨域&quot;&gt;&lt;a href=&quot;#什么是跨域&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域&quot;&gt;&lt;/a&gt;什么是跨域&lt;/h1&gt;&lt;p&gt;跨域是指一个域下的文档或脚本试图去请求另一个域下的资源。&lt;/p&gt;
&lt;h1 id=&quot;如何跨域&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="前端" scheme="https://swordYWQ.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://swordYWQ.github.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="http" scheme="https://swordYWQ.github.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Vue性能优化之keep-alive</title>
    <link href="https://swordYWQ.github.com/2018/03/06/vue/vue-keepalive/"/>
    <id>https://swordYWQ.github.com/2018/03/06/vue/vue-keepalive/</id>
    <published>2018-03-06T06:26:19.166Z</published>
    <updated>2018-08-24T03:50:45.778Z</updated>
    
    <content type="html"><![CDATA[<p>在web项目中我们经常使用各种缓存在达到提高访问速度的效果，那么，在vue项目中如何使用组件缓存呢。</p><h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><p>keep-alive 是vue官方提供的缓存组件。它是一个抽象组件，在页面中使用keep-alive组件缓存,能有效提高页面响应速度，组件被卸载后不会被destroy掉，而是变成不活跃状态存在内存中，当再次访问组件时直接从内存中获取缓存渲染，而不是重新请求。</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>一般使用keep-alive的场景为router-view路由组件或者component动态组件。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>1 只用单独的keep-alive包裹的话，会缓存router-view 渲染的所有组件<br>2 使用include绑定一个数组，只会缓存数组中name相同的组件<br>3 使用exclude绑定一个数组，会缓存除了数组中name相同的其他所有渲染的组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive :include=<span class="string">"cachePages"</span> :exclude=<span class="string">"excludePages"</span>&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>能够实现打开后的组件进行缓存，但关闭标签页后，重新打开组件，组件仍是缓存后的组件，无法实现从内存中移除已缓存的组件。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>经过项目中的测试，发现如果需要比较正常开发多标签页的网站应用，比较适合的方法是使用component组件，组件由component渲染，使用一个数组对组件名进行保存，通过循环生成组件。这种方式能比较方便地实现度标签项目，但缺点是组件打开过多时会造成内存占用过多，因此最好对页面数量进行限制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在web项目中我们经常使用各种缓存在达到提高访问速度的效果，那么，在vue项目中如何使用组件缓存呢。&lt;/p&gt;
&lt;h2 id=&quot;keep-alive&quot;&gt;&lt;a href=&quot;#keep-alive&quot; class=&quot;headerlink&quot; title=&quot;keep-alive&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="https://swordYWQ.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://swordYWQ.github.com/tags/vue/"/>
    
      <category term="前端" scheme="https://swordYWQ.github.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
